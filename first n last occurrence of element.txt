#include <iostream>

using namespace std;

void firstocc(int even[], int n, int key)
{
    int start = 0;
    int end = n-1;
    
    int mid = start +(end - start)/2;
    int ans = -1;
    
    while(start <= end)
    {
        if(even[mid] == key)
        {
            ans = mid;   
        }
        
        else if(even[mid] <= key)
        {
            start = mid + 1; 
        }
        
        else if(even[mid >= key])
        {
            end = mid - 1;
        }
        mid = start + (end-start)/2;
    }
    return ans;
}

void lastocc(int even[], int n, int key)
{
     int start = 0;
    int end = n-1;
    
    int mid = start +(end-start)/2;
    int ans = -1;
    
    while(start <= end)
    {
        if(even[mid] == key)
        {
            ans =  mid;   
            start = mid + 1;
        }
        
        if(even[mid] <= key)
        {
            start = mid + 1; 
        }
        
        if(even[mid >= key])
        {
            end = mid - 1;
        }
    }
}


int main()
{
    int even[7]={1,2,3,3,3,4,5};
       
    cout << "First Occurrence of 3 at Index: " << firstocc(even, 7, 3) << endl;
    cout << "Last Occurrence of 3 at Index: " << lastocc(even, 7, 3)  << endl;

    

    return 0;
}













int firstocc(vector<int>& arr, int n, int key)
{
    int start = 0;
    int end = n-1;
    
    int mid = start +(end - start)/2;
    int ans = -1;
    
    while(start <= end)
    {
        if(arr[mid] == key)
        {
            ans = mid;   
        }
        
        else if(arr[mid] <= key)
        {
            start = mid + 1; 
        }
        
        else if(arr[mid >= key])
        {
            end = mid - 1;
        }
        mid = start + (end-start)/2;
    }
    return ans;
}

int lastocc( vector<int>&  arr, int n, int key)
{
     int start = 0;
    int end = n-1;
    
    int mid = start +(end-start)/2;
    int ans = -1;
    
    while(start <= end)
    {
        if(arr[mid] == key)
        {
            ans =  mid;   
            start = mid + 1;
        }
        
        if(arr[mid] <= key)
        {
            start = mid + 1; 
        }
        
        if(arr[mid >= key])
        {
            end = mid - 1;
        }
    }
}




pair<int, int> firstAndLastPosition(vector<int>& even, int n, int k)
{
    pair<int, int>p;
    p.first= firstocc(even, n, k);
    p.second = lastocc(even, n, k);
    return p;
}